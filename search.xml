<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>XLINK</title>
      <link href="/2023/10/15/XLINK/"/>
      <url>/2023/10/15/XLINK/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>论文题目</strong>：<a href="https://dl.acm.org/doi/abs/10.1145/3452296.3472893">XLINK：QoE-Driven Multi-Path QUIC Transport in Large-scale Video Services</a></p><p><strong>所属会议</strong>：<strong>SIGCOMM 2021（CCF  A）</strong> </p><p><strong>博客目的</strong>：论文阅读时的<strong>翻译总结</strong>，供同行学习参考</p><h1 id="XLINK"><a href="#XLINK" class="headerlink" title="XLINK:"></a>XLINK:</h1><h2 id="Ⅰ-Introduction"><a href="#Ⅰ-Introduction" class="headerlink" title="Ⅰ. Introduction"></a>Ⅰ. Introduction</h2><ol><li><strong>两个观察结果：</strong>短形式产品 <strong>视频摊位和 启动延迟</strong> 显著影响用户满意度 /  <strong>消费者希望看到更多的细节</strong>，更有参与感 &lt;促使 推动视频向更高的数据速率发展&gt; </li><li><strong>多路径传输的关注度高 👆，最著名 “MPTCP”  缺点：</strong>需要<strong>智能手机的操作系统级支持</strong>，非手机制造商的移动应用程序提供商来说，部署成本非常高.</li></ol><ul><li>“ Quic 优势”: 与TCP不同，QUIC作为一种 **” 用户空间协议”**，可以作为应用的一部分进行安装和升级，因此作为端到端解决方案的多路径 QUIC 可以快速部署并不断发展</li></ul><ol start="3"><li><strong>问题：</strong>最近的提案 [7,13 ]被设计为支持通用流量，如  “ 网络和批量数据传输” ，<strong>并没有 “ 针对视频” 进行优化</strong> </li><li><strong>尝试</strong>：将多路径 quic 部署到大规模网络中， <strong>理论是是比单路经要快</strong>，但是结果相反，有效地利用 聚合的无线资源 比预期的要 困难得多。 <ul><li>主要障碍：由 “快速变化和异构路径” 引起的 multi-path head-of-line （多路径线性头 MP-HoL）阻塞问题 &lt;”code_004”&gt;</li><li>解决上述问题的一个方法是<strong>发送冗余包</strong>，过 去发送数据副本的多路径解决方案可能适用于  “ 音频服务” [22]，但它们不适用于视频，因为流量要大得多</li></ul></li><li>令人惊讶的是，到目前为止，在大规模视频服务中使用  “ 多路径的可行性和好处仍然不清楚”</li><li><strong>XLINk 关键思想</strong>：利用 QUIC 作为 “ 用户空间协议” 的机会，直接捕获视频 QoE 意图来控制多路径调度和管理 : <ul><li> 不注重网络预测精准度，依靠客户机的**” QoE反馈” 来 “动态控制” 服务器调度<strong>程序中的</strong>数据包重新注入**的侵略性.</li><li> 多并发 quic流下，通过 “ <strong>基于流优先级的重注入</strong>“ ，XLINK 根据流的紧急程度仔细确定发送顺序，从而实现更流畅的流体验</li><li> 引入了<strong>基于视频帧优先级的重注入的第一视频帧加速</strong></li></ul></li><li><strong>Contribution :</strong> <ol><li>提出了生产环境中 <strong>多路径QUIC 视频传输</strong>的第一次大规模实验研究，以证明可行性和可部署性</li><li>我们指出，从 “ 根本上” 解决上述挑战的<strong>关键</strong> 是**利用QUIC “ 作为用户空间协议”**，允许它与应用程序密切交互，并使用视频QoE进行调度和路径管理 。</li><li>揭示了在以前的文献中较少讨论的关于性能、成本、移动性、兼容性和网络异质性的实际挑战，并分享了我们在应对这些挑战方面的经验</li></ol></li><li><strong>特别的</strong>：XLink 利用远程反馈 控制 “ 多路径数据包重注入” 背后的<strong>创新超出了端到端视频传输的范围</strong>，可以作为一种通用的高性能多路径传输机制;<ul><li>基于**” 流和帧优先级”** 的调度利用 QUIC 表达视频感知的能力，因此更加特定于QUIC!</li></ul></li></ol><blockquote><p>&lt; **XLINK的** 多路径协同作用和应用程序的qos意识的影响 超出了短视频，并为直播、360度视频、增强现实(AR)和虚拟现实(VR)等其他令人兴奋的研究领域铺平了新的道路&gt;</p></blockquote><h2 id="Ⅱ-Motivation"><a href="#Ⅱ-Motivation" class="headerlink" title="Ⅱ. Motivation"></a>Ⅱ. Motivation</h2><ol><li><p>现状：</p><ul><li>观看者对<strong>短视频</strong> QoE 缺陷的容忍度低于<strong>长视频</strong></li><li>消费者对视频内容的需求正在向 4K 及以上 (如AR和VR) 发展，这可以要求超过85Mbps的比特率[28]</li></ul></li><li><p><strong>Road to QUIC</strong> ：</p><ul><li>TCP相比，<strong>QUIC更快、更安全</strong>，并提供防止协议僵化的保护</li><li>QUIC的用户空间属性是克服主要障碍的关键，如性能不理想、处理负载平衡器的困难、获得操作系统级支持以及穿越阻碍MPTCP使用的中间层[5,31,32]</li></ul></li><li><p><strong>Better mobility support:</strong></p><p><strong>移动性支持在无线通信中至关重要</strong>！</p><ul><li>QUIC引入了连接迁移(connection migration, CM)[34]，但连接迁移需要迁移后<strong>重置拥塞窗口</strong>，这可能不适合视频流，因为视频流需要持续的高带宽</li><li>MPTCP在 Sir i中支持Wi-Fi-LTE漫游的好处，已被证明，<strong>还不清楚多路径在部署的视频服务中是否仍然有效</strong></li></ul></li><li><p><strong>Multi-path in 5G：</strong></p><ul><li><p>5G ： </p><ul><li>优势：<strong>更高的带宽</strong></li><li>劣势：<strong>传播损耗更大；穿透能力更弱；信号覆盖范围更小</strong></li></ul></li></ul></li></ol><h2 id="Ⅲ-Experience-with-vanilla-Multi-Path-QUIC"><a href="#Ⅲ-Experience-with-vanilla-Multi-Path-QUIC" class="headerlink" title="Ⅲ. Experience with vanilla Multi-Path QUIC"></a>Ⅲ. Experience with vanilla Multi-Path QUIC</h2><ul><li><strong>多路径性能</strong>面临的两个重大挑战：<ul><li>移动性</li><li>路径延迟差异</li></ul></li><li>基本流程：<ol><li>研究了vanilla-MP在移动环境中的<strong>动力学</strong></li><li>讨论了通过<strong>不同无线技术</strong>访问视频服务器时测量到的路径延迟差异</li><li>展示了<strong>vanilla-MP</strong>在我们的生产环境中的大规模<strong>A/B</strong>测试中如何对抗单路径 QUIC (SP)</li></ol></li></ul><blockquote><p><strong>We implemented vanilla-MP with the min-RTT packet scheduler as described</strong><br><strong>in MPQUIC [12]. The min-RTT packet scheduler is also the default packet scheduler</strong><br><strong>used in Linux kernel MPTCP</strong></p></blockquote><ol><li><p><strong>Fast changing wireless links</strong> :</p><ul><li>使用<strong>Mahimahi仿真工具</strong>绘制了在我们的校园行走时收集的一对<strong>Wi-Fi和LTE轨迹</strong>重放其飞行数据包的动态图：<ul><li><img src="/2023/10/15/XLINK/image-20230918092559312.png" loading="lazy"></li><li>LTE走线相对稳定</li><li><strong>Wi-Fi走线变化迅速</strong>，吞吐量从1.7s下降到2.2s，几乎为零<ul><li><strong>拥塞窗口(CWND)无法跟上这种快速变化</strong></li><li>结果: <ol><li>调度器仍然在该路径上继续发送数据包</li><li>如此快速的变化可能<strong>导致严重的HoL阻塞</strong>，因为视频帧无法传送到应用程序，直到**慢路径(Wi-Fi)**上所有停滞的数据包经过很长一段时间恢复. </li></ol></li></ul></li></ul></li></ul></li><li><p><strong>Path delays in heterogeneous networks</strong></p><ol><li>为了<strong>了解路径延迟差异</strong>，在通过不同的<strong>无线技术访问</strong>视频服务时测量了 RTT</li><li><strong>无线技术</strong>对于 <strong>Path delay</strong> 有显著影响：<ul><li>LTE的路径延迟中位数分别是Wi-Fi和5G SA的2.7倍和5.5倍，</li><li>LTE的 90𝑡 百分位数路径延迟是Wi-Fi的3.3倍</li></ul></li><li>在<strong>多路径</strong>中，路径延迟差异随着跨 ISP 延迟的增加而进一步增大<ul><li>短视频服务中，路径延迟的巨大差异可能会影响视频启动延迟和请求完成时间</li></ul></li></ol></li><li><p><strong>Deployment of vanilla-MP</strong></p><ol><li><p>我们通过在<strong>短视频服务</strong>中针对单路径**QUIC (SP)**进行大规模 A/B 测试，验证了vanilla-MP的有效性3:</p><p><strong>(视频块请求完成时间(RCT)在一周内收集)</strong></p><img src="/2023/10/15/XLINK/image-20230918093825351.png" loading="lazy"><ul><li>Vanilla-MP 仅在中位数和90𝑡h百分位RCT中有效，并且可能导致更差的表现（第1,3,4和5天）。最大的中位数RCT退化为16%。</li><li>Vanilla-MP 总是导致99𝑡百分位RCT的退化，甚至比SP(第4天和第7天)差28%</li></ul></li></ol></li><li><p>在下表中，我们报告了一周内观察到的<strong>客户端视频重缓冲率的降低</strong>(以视频播放时间总量归一化的视频重缓冲时间总量来衡量)。<br><img src="/2023/10/15/XLINK/image-20230918094747923.png" alt="image-20230918094747923" loading="lazy"></p><ol><li>负数表示 vanilla-MP 的再缓冲速率比SP差</li><li><strong>它不但没有减少，反而增加了34%以上，最大增幅高达96%</strong></li><li>由于上面讨论的问题，<strong>这样的结果并不令人惊讶，因此 vanilla-MP 未能达到不比单路径传输更差的性能标准</strong>.</li></ol></li></ol><h2 id="Ⅳ-XLINK-Design-Overview"><a href="#Ⅳ-XLINK-Design-Overview" class="headerlink" title="Ⅳ. XLINK Design Overview"></a>Ⅳ. XLINK Design Overview</h2><p><strong>goal:</strong> 以<strong>最小的开销成本</strong>实现<strong>最佳的用户感知的QoE</strong>(ex:低延迟和小的重新缓冲)</p><p><img src="/2023/10/15/XLINK/image-20230918101710249.png" alt="image-20230918101710249" loading="lazy"></p><ul><li><p>如上所示： XLINK被设计为<strong>部署在移动应用和边缘服务器中</strong>的<strong>轻量级端到</strong>端多路径<strong>QUIC扩展</strong></p></li><li><p>促使：<strong>多家庭移动客户</strong>端能够<strong>通过多个无线接口</strong>(例如，Wi-Fi和蜂窝)<strong>同时传输</strong>与远程服务器通信</p></li><li><p>特征：与过去的解决方案**(如MPQUIC和MPTCP)<strong>不同，</strong>这些解决方案无需应用程序的辅助**；</p><pre><code>**XLINK由 跨层网络设计的最新趋势 驱动[41]**，并将**传输与视频应用**紧密集成在一起，同时实现高性能和成本效益。</code></pre></li><li><p>核心：利用<strong>QUIC作为用户空间协议</strong>的机会，在 多路径调度和管理中<strong>利用 用户感知的视频QoE。</strong></p></li></ul><ol><li><p><strong>体系结构上</strong>：XLINK的 QOS 驱动调度构建 在<strong>客户机-服务器反馈机制</strong>之上</p><ul><li>XLINK<strong>客户端</strong> 捕获用户<strong>感知的QoE信号</strong> (例如，视频播放器缓存的帧和视频播放器帧率)</li><li>使用 <strong>ACK_MP扩展帧</strong>  (第6节) 将这些信号 传送到 <strong>远程视频服务器以控制其调度</strong><img src="/2023/10/15/XLINK/image-20230918103943018.png" alt="image-20230918103943018" style="zoom:80%;" loading="lazy"></li><li><strong>QoE_control_signal字段</strong>的使用 控制了多路径的耦合和解耦, 它允许<strong>XLINK克服多路径HoL阻塞</strong>，而不会产生不必要的成本开销，这对于大规模部署至关重要 <strong>(第5.2节 阐述)</strong><ul><li>XLINK通过提供 <strong>第一视频帧加速(5.1)<strong>、 <strong>无线感知主路径选择(5.3)</strong> 和 <strong>最快路径ACK_MP</strong>来进一步处理大路径延迟差异，以</strong>避免慢路径造成的过度延迟并改善视频启动</strong></li></ul></li></ul></li><li><p><strong>算法上</strong>：<strong>XLINK利用数据包重注入 来解耦多个路径</strong></p><ul><li><p>特征：与 过去的重注入 [6] 不同，XLINK在两个级别实现了基于优先级的重注入:</p><ul><li>基于 <strong>传输 (QUIC流)</strong> <strong>优先</strong> 级别</li><li>基于 <strong>应用 (视频帧) 优先</strong> 级别 (第5.1节)</li></ul></li><li><blockquote><p>[6] :  Costin Raiciu, Christoph Paasch, Sebastien Barre, Alan Ford, Michio Honda,<br>Fabien Duchene, Olivier Bonaventure, and Mark Handley. How hard can it be?<br>designing and implementing a deployable multipath {TCP}. In 9th {USENIX}<br>Symposium on Networked Systems Design and Implementation ({NSDI} 12), pages<br>399–412, 2012</p></blockquote><ul><li><strong>基于流优先级的重注入 ：</strong> <ul><li>考虑了<strong>QUIC请求视频不同部分</strong>的并发流</li><li>它<strong>确保早期流</strong>的重注入数据包在后期流的数据包<strong>之前发送</strong>，从而防止流在传输时阻塞</li></ul></li><li><strong>基于视频帧优先级的重注入：</strong><ul><li>区分了<strong>流内视频帧</strong>的紧迫性</li><li>它以<strong>最高优先级处理视频的第一帧</strong>，以加速视频启动</li></ul></li></ul></li><li><p><strong>在QoE反馈控制方面</strong>：</p><ul><li>XLINK引入了<strong>双阈值控制(5.2.2)<strong>，实现了</strong>响应性和成本效率</strong>，并提供了平衡性能和成本的灵活性</li></ul></li></ul></li><li><p><strong>协议层上</strong>：</p><ul><li><p>XLINK 建立在<strong>草案 [11] 中提出的多路径扩展的基础上</strong>，该扩展合并了<strong>PATH_STATUS和ACK_MP扩展帧</strong>来管理 路径状态并确认从不同路径接收的数据包。</p></li><li><blockquote><p>[11] : Yanmei Liu, Yunfei Ma, Christian Huitema, Qing An, and Zhenyu Li. Multi-<br>path Extension for QUIC. Internet-Draft draft-liu-multipath-quic-02, Internet<br>Engineering Task Force, December 2020. Work in Progress.</p></blockquote></li><li><p>唯一的区别是 当前的<strong>XLINK实现(在本实验中使用)在 ACK_MP 帧中作为附加字段发送QoE反馈</strong>，而不是在草案中指定的<strong>独立的QOE_CONTROL_SIGNALS帧中发送QoE反馈</strong></p></li></ul></li></ol><h2 id="Ⅴ-QoE-Driven-Scheduling-AND-Path-Management"><a href="#Ⅴ-QoE-Driven-Scheduling-AND-Path-Management" class="headerlink" title="Ⅴ. QoE-Driven Scheduling AND Path Management"></a>Ⅴ. QoE-Driven Scheduling AND Path Management</h2><p>介绍：本节讨论 <strong>QoS驱动的多路径调度和路径管理</strong>的细节，这使 XLINK能够以最小的开销实现用户感知的优质qos</p><p>整体 由 三个主要部分组成: </p><ul><li><strong>基于流和视频帧优先级的数据包重注入</strong><ul><li>克服了多路径<strong>HoL阻塞、流阻塞</strong>以及<strong>视频启动时的过度延迟</strong></li></ul></li><li><strong>QoE反馈控制</strong>：<ul><li><strong>控制与再注入相关的冗余</strong>去 降低成本</li></ul></li><li><strong>QoE感知路径管理</strong><ul><li>处理异构网络中的<strong>路径延迟差异</strong></li><li>包括<strong>无线感知主路径选择</strong>和<strong>最快路径多路径</strong>ACK</li></ul></li></ul><ol><li><p><strong>Priority-based re-injection</strong></p><ul><li><p>Why re-injection?： <strong>重注入用于解耦多个路径</strong></p><ul><li><strong>多路径HoL阻塞</strong>的根本原因： 是调度程序拆分数据包时多个路径的耦合，：</li><li>(a) 未注入，，（b) 重注入后<img src="/2023/10/15/XLINK/image-20230918112726847.png" loading="lazy"></li><li><strong>快速路径和慢速路径</strong> 发送的数据包相互补充，<strong>Client</strong> 等待两条路径都成功发送以<strong>获得整个视频</strong>块</li><li><strong>重注入是一种技术</strong>，它允许我们通过<strong>使用冗余的重复数据包</strong>来解耦多条路径，如图3(b)所示</li><li>重注入流程：<ol><li><strong>发送方</strong>跟踪<strong>未确认数据包的队列</strong>(unacked_q)。</li><li>当 <strong>pkt_send_q</strong> 中没有更多的数据包要发送时，发送方 可以将未<strong>确认的数据包6和7的副本</strong>重新注入到<strong>快速路径</strong>中，而无需等待慢路径上的丢失恢复，从而 允许接收方继续消费数据而不会受到阻塞效应的影响。</li></ol></li></ul></li><li><p><strong>Priority-based re-injection.</strong></p><ul><li>问题：上述重注入，不足实现视频传输的QoE</li><li>Quic 特征：与TCP协议不同，<strong>QUIC传输层有QUIC流的概念</strong>，一个连接可以携带多个流，每<strong>个流单独控制和丢失恢复</strong><ul><li>在短视频传输中，<strong>视频播放器可以同时请求多个流</strong>，每个流下载视频的一小部分</li></ul></li><li><strong>不同的重注模式：</strong><img src="/2023/10/15/XLINK/image-20230918134758263.png" loading="lazy"></li><li><strong>传统的重注入：</strong>如上图(a)所示，以附加方式工作，<strong>pkt 4</strong> 在慢路径上丢失，调度器只能在流2后面pkt_send_q的末尾重新注入它，这不是最优的。<ul><li>由于流的内容按<strong>顺序播放</strong>，流2现在<strong>阻塞了</strong>流1的传输</li><li>一个早期的流<strong>应该享有高优先级的重注入</strong>，这样 pkt 4 就会在<strong>流1之后被重注入</strong></li></ul></li><li><strong>XLINK的重注入：</strong> 采用<strong>基于流优先级的重注入</strong>( 图(b) ) 来处理 <strong>并发QUIC流</strong><ul><li>当发送方发出 <strong>流1</strong> 中的<strong>最后一个数据包</strong>时，它会立即检查<strong>unacked_q</strong>以查找具有相同流优先级的数据包</li><li>如果有，它将这些数据包<strong>插入到低优先级流的未发送数据包之前</strong>，如图4(b)所示，从而防止流阻塞。 &lt;此时的队列中 流2属于低优先级&gt;</li></ul></li></ul></li><li><p>**First-video-frame acceleration **</p><ul><li><p>引入 <strong>基于视频帧的优先级</strong>重注入，<strong>加速第一视频帧的交付</strong></p><ul><li>如果没有它，在存在<strong>较大路径延迟差异</strong>的情况下使用多路径可能会<strong>遭受视频帧阻塞效应</strong>导致的视频启动缓慢</li><li>阻塞：<img src="/2023/10/15/XLINK/image-20230918135611129.png" loading="lazy"></li><li>如果条件良好路径的<strong>拥塞窗口已满</strong>，多路径调度程序可能会将第一视频帧数据包<strong>放在条件不良的路径</strong>上，( 例如图(c)中蓝色的pkt 3，<strong>放在了慢的路径</strong>) </li><li>在这种情况下，<strong>基于流优先级的重注入</strong>提供的<strong>流级粒度是不够</strong>的，因为重注入的数据包仍然需要等待同一流中的其他视频帧被交付 <strong>(我想要的是在4后面，而不是在8后面)</strong></li></ul></li><li><p>XLINK <strong>使用 基于视频帧的优先级</strong> 进行解决：</p><ul><li>在这种模式下，XLINK向应用程序提供 <strong>stream_send API</strong>，以更细的粒度表达视频 Qos 感知<ul><li><strong>具体来说</strong>：为了加速第一视频帧，应用程序可以将<strong>包含第一视频帧的流数据</strong>设置为具有指示 视频帧相对位置的位置和大小参数的<strong>最高优先级</strong></li></ul></li><li><strong>启用时：</strong>XLINK 在发送最后一个第一帧数据包 (pkt 4) 后检查来自第一个视频帧 (pkt 3) 的未确认数据包</li><li>如果有，调度程序在 同一流中<strong>其他视频帧的任何未发送的数据包之前</strong>重新注入它 (pkt 3)</li><li>这次重注入的副本 可以<strong>走快速路径</strong>，可能会比原始数据包<strong>更早到达</strong></li><li><strong>结果：</strong>基于视频帧优先级的重注入<strong>避免了慢路径的过度延迟</strong>，显著提高了视频启动速度</li></ul></li></ul></li></ul></li><li><p><strong>QoE feedback and re-injection control</strong></p></li></ol><ul><li><p><strong>上述引发的问题</strong>：数据包重注入的问题在于它<strong>引入了大量冗余数据包</strong>，案例中我们发现直接应用回注使**总流量增加了15%**， 成本开销问题，冗余还会影响总体吞吐量</p></li><li><p>解决方法：**XLINK **利用客户机的 <strong>QoE 反馈来控制 与数据包重注入相关的开销</strong>，同时确保用户感知的QoE</p><blockquote><p>背景：实际上，当 视频播放器 缓存视频块时，并不总是需要冗余数据包。</p><p>​        如果<strong>缓冲区占用级别高</strong>，则到下一次可能的重新缓冲的剩余游戏时间很长，因此，使用重新注入的紧迫性较低；相反，如果<strong>缓冲区占用水平较低</strong>，则距离下一次可能的重新缓冲的时间很短，因此，使用重新注入的紧迫性很高。</p></blockquote></li><li><p><strong>知道客户机视频播放器的缓冲区占用率是用户感知的QoE的一个强有力的指示器。XLINK捕获缓冲区占用信息并将其发送回服务器以控制其重注入使用</strong></p></li><li><p>其信号 在上述 中<strong>ACK_MP帧的QoE_Control_Signal字段</strong>中传递。</p></li><li><p>QoE信号的定义可以很灵活。在我们的例子中，我们从客户端的视频播放器捕获<strong>四种类型的信号</strong>：</p><ul><li><em><strong>cached_bytes</strong></em> : 缓存的字节数</li><li><em><strong>cached_frames</strong></em> : 缓存的帧数</li><li><em><strong>bps</strong></em> : 比特率</li><li><em><strong>fps</strong></em> : 帧速率</li></ul></li></ul><ol><li><p><em><strong>Capturing QoE signals.</strong></em></p><ul><li><p>XLINK 捕获 QoE反馈信号的流程：</p><img src="/2023/10/15/XLINK/image-20230918144016477.png" loading="lazy"></li><li><p><strong>MediaCacheService</strong> 响应来自媒体播放器的<strong>视频播放请求</strong>，并向服务器发送HTTP范围请求以获取视频块</p></li><li><p><strong>TNET</strong> 是淘宝客户端使用的 Android 网络 SDK，用于向 XLINK 发送QoE信号</p></li><li><p>传入的媒体数据首先由<strong>Meida Source 处理</strong>，其中<strong>音频和视频帧被分割</strong>并缓存在源管道中，源管道随后将帧发送到各自的解码器进行实际解码.</p></li><li><p><strong>Source Pipe</strong> 跟踪 缓存帧的数量和缓存字节的数量</p></li><li><p><strong>Decoder</strong> 了解帧率和解码率</p></li><li><p>为了获得QoE信息，<strong>Source Pipe</strong>  和 <strong>Decoder</strong>  定期将这些更新的指标发送给 <strong>TNET</strong></p></li><li><p><strong>当XLINK想要发送QoE反馈时，它会查询TNET</strong></p></li><li><p>然后 XLINK 将 QoE反馈信息封装到 ACK_MP帧中的 <strong>QoE控制信号字段 （QoE_Control_Signal）</strong> 中，</p><ul><li><em><strong>Double thresholding control</strong></em> :</li></ul></li><li><p>控制 重注入使用的算法需要满足三个属性: <strong>响应性、成本效率 和 灵活性</strong></p><ol><li>在<strong>紧急需要回注</strong>时，必须有足够的反应能力。</li><li>准确防止<strong>不必要</strong>的再注射。</li><li>需要提供灵活性来调<strong>整性能和成本之间的平衡</strong></li></ol></li><li><p>因此，引入 了<strong>双阈值控制</strong>  ，其算法如下：</p><img src="/2023/10/15/XLINK/image-20230919145957260.png" loading="lazy"></li><li><p>算法内容：</p><ol><li><p>输入：如上所示的 四种QoE信号</p></li><li><p>输出：是否 <strong>启用重注入的决策</strong></p></li><li><p>step1: <em><strong>Computing play-time left</strong></em></p><ul><li>首先用 QoE反馈 估计客户端<strong>缓冲区中</strong>剩余的<strong>视频播放时间Δ𝑡</strong> , <strong>&lt;如上算出&gt;</strong></li><li>&lt; 当视频不是用恒定比特率编码并且帧率很高时，我们建议使用 **𝑐𝑎𝑐h𝑒𝑑_𝑓𝑟𝑎𝑚𝑒𝑠 / 𝑓𝑝𝑠**来计算Δ𝑡，因为𝑏𝑝𝑠可能会表现出很大的变化 ; 如果帧速率非常低,计算基于𝑐𝑎𝑐ℎ𝑒𝑑_𝑏𝑦𝑡𝑒𝑠和𝑏𝑝𝑠进行&gt;</li></ul></li><li><p>step2 : <em><strong>Double thresholding</strong></em> </p><ul><li>我们将剩余的 <strong>播放时间Δ𝑡</strong> 与两个阈值 <strong>T<del>th1</del></strong> 和 <strong>T<del>th2</del></strong>   进行比较, 其中 <strong>T<del>th1</del></strong> &lt; <strong>T<del>th2</del></strong>  </li><li><strong>T<del>th1</del></strong> 用于 确保响应性：if  **Δ𝑡 &lt; T<del>th1</del>**  =&gt;  剩余播放时间太少。立即启动重注入</li><li><strong>T<del>th2</del></strong> 用于成本效率 :  if  <strong>Δ𝑡 &gt; T<del>th2</del></strong>  =&gt;  缓存足够多，关闭重注入以降低成本</li></ul></li><li><p>step3: <em><strong>Comparing with delivery time</strong></em></p><ul><li><p>当 Δ𝑡 处于 <strong>[T<del>th1</del> , T<del>th2]</del>]</strong> 范围内，<strong>冲区占用处于中等水平，因此飞行中数据包的投递时间在决策中起作用</strong></p></li><li><p>进一步将<strong>Δ𝑡</strong>与飞行中数据包的估计最大投递时间 <strong>deliverTime<del>max</del></strong> 进行比较：</p><ul><li><p>&lt; :  则其中一条路径可能太慢，因此应该<strong>打开重注入</strong>以使用另一条路径<strong>加速数据包的传递</strong></p></li><li><blockquote><p>: 飞行的报文准时到达，关闭回注</p></blockquote></li><li><p>其中 <strong>deliverTime<del>max</del></strong> : 包含未确认数据包的所有路径的<strong>𝑅𝑇𝑇加上它的方差𝛿</strong> 的最大值：<br><img src="/2023/10/15/XLINK/image-20230919152747416.png" alt="image-20230919152747416" loading="lazy"></p></li></ul></li></ul></li></ol></li><li><p>为了说明该算法 如何在 <strong>快速变化的无线环境中</strong> 以更低的成本 <strong>克服 HoL 阻塞</strong>，绘制了<strong>客户端的缓冲区级别</strong>和<strong>重新注入数据包的数量与时间</strong>的动态关系：</p><ol><li><strong>Network traces</strong> &amp;&amp; <strong>vanillaMP：</strong><img src="/2023/10/15/XLINK/image-20230919153915630.png" loading="lazy"></li><li><strong>re-injection without QoE control</strong>   &amp;&amp;  <strong>re-injection with QoE control</strong>：<img src="/2023/10/15/XLINK/image-20230919154051997.png" loading="lazy"></li><li>从上图我们可以看出：<ul><li>随着 <strong>Path1</strong> 的恶化，缓冲级别多次降至零的 vanilla-MP 遭受了严重的<strong>多路径HoL阻塞</strong>，导致频繁的视频重新缓冲。</li><li>重注入在克服多路径 HoL阻塞 方面是有效的，因此当 Path1 恶化时，**图c和图d **可以在其缓冲区中保持足够的缓存字节</li><li>同时，<strong>带有QoE反馈</strong>的 <strong>Re-injection</strong> 只在缓冲级别较低时使用了回注，避免了缓冲级别较高时不必要的回注.</li></ul></li></ol></li><li><p><em><strong>Performance and cost tradeoffs :</strong></em> </p></li><li><p>两个阈值 <strong>T<del>th1</del> , T<del>th2</del></strong> 提供了在<strong>性能和成本</strong>之间进行<strong>权衡的灵活性</strong></p></li></ul></li><li><p><em><strong>QoE-aware path management:</strong></em> </p><ul><li><p>本节描述 XLINK 的 <strong>Qos感知路径管理</strong> 如何处理异构网络中的<strong>路径延迟差异</strong></p></li><li><p>**Wireless-aware primary path selection: ** </p><ul><li><p>XLINK 根据<strong>无线接口的类型</strong>仔细确定 初始化<strong>连接的主要路径</strong></p></li><li><blockquote><p>过去的研究表明，由于路径延迟的差异，<strong>主路径选择会影响MPTCP的性能[43]</strong></p></blockquote></li><li><p>随着<strong>5G SA</strong>的到来，<strong>路径延迟差异</strong>进一步扩大，因为：</p><ol><li>不同于与 LTE 共用同一个核心网的 5G NSA , <strong>5G SA采用了全新的、独立的核心网</strong></li><li><strong>5G SA本身支持边缘计算</strong>，并使内容交付服务进一步接近接入网的边缘</li></ol></li><li><p>为了适应即将到来的5G SA，我们使 XLINK 的主要路径选择具有无线感知能力：</p><ul><li>例如:  <strong>5G SA &gt; 5G NSA &gt; WiFi &gt; LTE</strong></li></ul></li><li><p>当从<strong>不同的无线接口</strong>开始<strong>多路径连接</strong>时，我们测量了<strong>第一帧传输时间与不同帧大小</strong>的关系：<br><img src="/2023/10/15/XLINK/image-20230919161835070.png" alt="image-20230919161835070" loading="lazy"></p></li><li><p>如上所示：<strong>主路径选择对第一视频帧传送时间的影响是显著的</strong>， <strong>简单地从正确的主路径开始可以提供更快的视频启动</strong></p><ol start="4"><li><em><strong>Fastest-path Multi-path ACK</strong></em> ：</li></ol><ul><li><p><strong>最后，但重要的是，XLINK利用  最快路径多路径ACK</strong></p></li><li><p>与 <strong>MPTCP</strong> 不同的是，MPTCP 假定在<strong>同一子流(原始路径) 上返回ACK[4]</strong></p><ul><li><p>XLINK 允许从任何路径 <strong>返回ACK_MP</strong>，这提供了更大的灵活性</p></li><li><p>有两种基本策略: </p><ol><li>ACK_MP 在最快路径 <strong>(min-RTT路径)</strong> 上</li><li>ACK_MP 在原始路径上</li></ol></li><li><p><strong>在XLINK中，我们使用最快的路径来传输ACK_MP</strong></p></li></ul></li></ul></li><li><p>下面展示了 两种具有<strong>三次拥塞控制的ACK路径选择策略</strong>的效果：</p><img src="/2023/10/15/XLINK/image-20230919163800482.png" loading="lazy"></li><li><p>如上所示，测量 调整 <strong>两条路径之间的路径RTT比率</strong>来获得4MB的负载 的请求完成时间</p><ul><li>随着延迟比的增大，<strong>最快路径上的ACK_MP开始显示出优势</strong></li><li>原因是对于Cubic来说，更快的 <strong>ACK 返回有助于拥塞窗口增长更快，从而产生更好的吞吐量</strong></li></ul></li></ul></li></ul></li></ol><h2 id="Ⅵ-PROTOCOL-AND-IMPLEMENTATION"><a href="#Ⅵ-PROTOCOL-AND-IMPLEMENTATION" class="headerlink" title="Ⅵ. PROTOCOL AND IMPLEMENTATION"></a>Ⅵ. PROTOCOL AND IMPLEMENTATION</h2><p>​        我们将在本节中<strong>描述XLINK的协议和实现</strong>,我们从 XLINK 如何将<strong>QUIC扩展到多路径开始</strong>，然后 将 <strong>XLINK集成到android应用程序和视频服务</strong>中.</p><ol><li><p>XLINK 是基于我们的 <strong>多路径QUIC草案[11]</strong> 实现的，它以最小的修改将 IETF QUIC 扩展到多路径</p><ul><li><blockquote><p>[11] : Yanmei Liu, Yunfei Ma, Christian Huitema, Qing An, and Zhenyu Li. Multipath Extension for QUIC. Internet-Draft draft-liu-multipath-quic-02, Internet Engineering Task Force, December 2020. Work in Progress.</p></blockquote></li><li><p>与过去的提案 [7] 严重依赖于“单流”概念不同，我们在<strong>双向路径概念的基础上扩展了多路径</strong>，这很容易<strong>适应蜂窝和wifi链路的性质</strong>，这些链路覆盖了QUIC中的大多数多路径应用，同时保持设计简单易于实现.</p></li><li><p>通过这样做，我们能够<strong>重复使用大多数当前QUIC传输设计</strong>，唯一增加了<strong>三个新框架</strong>。<br>更重要的是，我们的设计<strong>支持QoE反馈</strong>，这是启用 XLINK 基于反馈的动态调度所必需的</p></li></ul></li><li><p><strong>Key design points</strong> :</p><ol><li>不同的路径由CID (connection id) 序列号来标识。为了方便丢包检测和恢复，我们<strong>对每条路径使用单独的包数空间</strong></li><li>我们保持 QUIC 包头格式不变，以<strong>避免包被中间盒阻塞的风险</strong>。</li><li>属于一个<strong>连接的所有路径共享相同的加密密钥</strong>，但我们合并了一种机制，使每个路径在 AEAD 中获得唯一的nonce。<ul><li>我们结合了**PATH_STATUS 和 ACK_MP扩展帧 **来支持 <strong>多路径功能和QoE反馈机制</strong>。</li></ul></li></ol></li><li><p><em><strong>Multi-path initialization</strong></em>：</p><ul><li><strong>多路径路径初始化过程</strong>如下所示：<br><img src="/2023/10/15/XLINK/image-20230918202755804.png" alt="image-20230918202755804" loading="lazy"></li><li>XLINK 首先以与 <strong>单路径QUIC相同的方式 <strong>初始化主路径, <strong>不同之处</strong>是在</strong>第一次握手期间</strong>，客户端包含一个<strong>𝑒𝑛𝑎𝑏𝑙𝑒_𝑚𝑢𝑙𝑡𝑝𝑎𝑡</strong>传输参数 <ul><li>如果服务器回复一个<strong>𝑒𝑛𝑎𝑏𝑙𝑒_𝑚𝑢𝑙𝑡𝑝𝑎𝑡参数</strong>，那么两个终端主机都知道<strong>支持多路径</strong></li><li>否则，它们会<strong>退回到单路径QUIC</strong>。</li></ul></li><li>在<strong>初始化新路径之前</strong>，客户端需要提供至少一个<strong>未使用的可用CID  (ex: C1, Seq=1)</strong></li><li>后续，服务器需要提供<strong>至少一个未使用的可用CID</strong>。为了建立一个新路径，<strong>客户端</strong>选择一个可用的<strong>连接ID S2</strong>作为新路径中的目标连接ID。</li><li>CID 的交换是通过 QUIC [34] 中定义的 New_connection_ID  针完成的。</li><li>为了避免路径欺骗攻击，XLINK 使用 <strong>PATH_CHALLENGE</strong> 和 <strong>PATH_RESPONSE</strong> 针</li><li>一旦多路径初始化，XLINK 使用 ACK_MP帧而不是ACK帧来发送确认</li></ul></li><li><p><em><strong>Frame extension</strong></em>：</p><ul><li>我们使用 <strong>PATH_STATUS帧</strong> 和 <strong>ACK_MP帧</strong> 来支持多路径功能和QoE反馈<ul><li><strong>PATH_STATUS帧</strong>：帮助管理多路径，它<strong>通知对等体一条路径的当前状态</strong>，对等体应该根据这些帧中表示的<strong>优先级</strong>发送报文<ul><li>取值：<strong>Abandon(0)、Standby(1)、Available(2)</strong></li></ul></li><li>端点使用  <strong>对等端 使用的CID序列号</strong> 作为PATH_STATUS帧(描述发送方的路径标识符)</li></ul></li></ul></li></ol><blockquote><p>后续论文内容非论文设计核心内容，读者可通过论文查看</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 流媒体传输 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Stream Media </tag>
            
            <tag> Reading </tag>
            
            <tag> Mate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/12/16/hello-world/"/>
      <url>/2021/12/16/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>Welcome to my homepage. Every programmer starts with “Hello World”, so I start my blog with “Hello World”<ul><li>Welcome to follow my <a href="https://github.com/taotangSeek">github</a><ul><li>Author : <a href="https://cic.tju.edu.cn/">Tianjin University CIC</a> Tao Tang</li></ul></li></ul></li></ul><p><img src="/2021/12/16/hello-world/t012dd538150f0687d8.jpg" alt="天津大学_360百科" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> Hello World </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Begin </tag>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
